# Generated by Django 5.2 on 2025-06-11 14:41
# flake8: noqa

import taggit.managers
from django.db import migrations


def convert_topics_to_tags(apps, schema_editor):
    """Convert existing topics CharField data to django-taggit tags"""
    BlogPostPage = apps.get_model('blog', 'BlogPostPage')
    Tag = apps.get_model('taggit', 'Tag')
    TaggedItem = apps.get_model('taggit', 'TaggedItem')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Get the content type for BlogPostPage
    try:
        blog_content_type = ContentType.objects.get(
            app_label='blog',
            model='blogpostpage'
        )
    except ContentType.DoesNotExist:
        # If content type doesn't exist, skip migration
        return

    # Process each blog post
    for post in BlogPostPage.objects.all():
        if post.topics:
            # Split topics by comma and clean them
            topic_list = [topic.strip() for topic in post.topics.split(",")]

            for topic_name in topic_list:
                # Skip empty topics and 'all' (which was used as default)
                if topic_name and topic_name.lower() != 'all':
                    # Get or create the tag
                    tag, created = Tag.objects.get_or_create(
                        name=topic_name.lower(),  # Normalize to lowercase
                        defaults={'slug': topic_name.lower()}
                    )

                    # Create the tagged item relationship
                    TaggedItem.objects.get_or_create(
                        tag=tag,
                        content_type=blog_content_type,
                        object_id=post.id
                    )


def reverse_convert_tags_to_topics(apps, schema_editor):
    """Reverse migration: convert tags back to topics"""
    BlogPostPage = apps.get_model('blog', 'BlogPostPage')
    TaggedItem = apps.get_model('taggit', 'TaggedItem')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    try:
        blog_content_type = ContentType.objects.get(
            app_label='blog',
            model='blogpostpage'
        )
    except ContentType.DoesNotExist:
        return

    # Process each blog post
    for post in BlogPostPage.objects.all():
        # Get all tags for this post
        tagged_items = TaggedItem.objects.filter(
            content_type=blog_content_type,
            object_id=post.id
        ).select_related('tag')

        # Convert tags back to comma-separated string
        tag_names = [item.tag.name for item in tagged_items]
        if tag_names:
            post.topics = ', '.join(tag_names)
        else:
            post.topics = 'all'  # Default value
        post.save()


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0016_move_cloudinary_data'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        # Step 1: Add the tags field (keeping topics field for now)
        migrations.AddField(
            model_name='blogpostpage',
            name='tags',
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text='Add tags separated by commas',
                through='taggit.TaggedItem',
                to='taggit.Tag',
                verbose_name='Tags'
            ),
        ),

        # Step 2: Run the data migration to convert topics to tags
        migrations.RunPython(
            convert_topics_to_tags,
            reverse_convert_tags_to_topics,
            hints={'blog_blogpostpage': True}
        ),

        # Step 3: Remove the old topics field
        migrations.RemoveField(
            model_name='blogpostpage',
            name='topics',
        ),
    ]
