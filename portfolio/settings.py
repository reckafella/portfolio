"""
Django settings for portfolio project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import os.path
from pathlib import Path

import daphne.testing

from app.views.helpers.helpers import get_error_files

# import random


def csrf_failure_view(request, reason=""):
    from authentication.views.auth.auth import CSRFFailureView
    return CSRFFailureView.as_view()(request, reason=reason)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
FALLBACK_SECRET_KEY = (
    "django-insecure-(mqx%zsxjly7+4g554fulva4zmxb(e=$e7gun91&_v%!oos6v+"
)
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", default=FALLBACK_SECRET_KEY)

""" All environment variables """
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "True")
DEBUG = False if DEBUG == "False" else True
# DEBUG = True

ENVIRONMENT = os.environ.get('ENVIRONMENT', default='development')

# SECURITY WARNING: define the correct hosts in production!
# See https://docs.djangoproject.com/en/4.2/ref/settings/#allowed-hosts
DEFAULT_HOSTS = "127.0.0.1,localhost,0.0.0.0"
if ENVIRONMENT == 'production':
    # Allowed hosts
    ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", default=DEFAULT_HOSTS).split(",")
    # Installed Apps
    INSTALLED_APPS = []

    # Supabase settings

    # Redis settings
    REDIS_URL = os.environ.get("REDIS_URL", default="")
    REDIS_PASSWORD = os.environ.get("REDIS_PW", default="")

    # CLOUDINARY CONFIG SETTINGS
    CLOUDINARY_CLOUD_NAME = os.environ.get("CLOUDINARY_NAME", '')
    CLOUDINARY_API_KEY = os.environ.get("CLOUDINARY_API_KEY", '')
    CLOUDINARY_API_SECRET = os.environ.get("CLOUDINARY_API_SECRET", '')
else:
    ALLOWED_HOSTS = DEFAULT_HOSTS.split(",")
    ALLOWED_HOSTS += [".github.dev"]
    INSTALLED_APPS = []
    try:
        import daphne
        daphne.testing
        INSTALLED_APPS.insert(0, 'daphne')
    except ImportError:
        pass  # daphne not available, skip it
    from app.views.helpers.helpers import get_redis_creds
    REDIS_URL = get_redis_creds()[0]
    REDIS_PASSWORD = get_redis_creds()[1]

    # CLOUDINARY CONFIG SETTINGS
    from app.views.helpers.helpers import get_cloudinary_creds
    CLOUDINARY_CLOUD_NAME = get_cloudinary_creds()[0]
    CLOUDINARY_API_KEY = get_cloudinary_creds()[1]
    CLOUDINARY_API_SECRET = get_cloudinary_creds()[2]


INSTALLED_APPS += [
    "django.contrib.admin", "django.contrib.auth", "rest_framework",
    "rest_framework.authtoken", "django.contrib.contenttypes", 'django.contrib.sites',
    "django.contrib.sessions", "django.contrib.messages",
    "django.contrib.staticfiles", "django.contrib.sitemaps",
    "corsheaders", "app", "authentication", "blog",
    'robots', 'captcha', "django_redis", "crispy_forms",
]

# Wagtail related apps
INSTALLED_APPS += [
    'wagtail.contrib.forms', 'wagtail.contrib.redirects', 'wagtail.embeds',
    'wagtail.sites', 'wagtail.users', 'wagtail.snippets', 'wagtail',
    'wagtail.images', 'wagtail.search', 'wagtail.admin',
    'modelcluster', 'taggit', 'wagtail.documents',
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",
        "user": "1000/hour",
    },
}


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://rohn.live",
    "https://portfolio-ot66.onrender.com",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:4173",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "portfolio.middlewares.rate_limit.RateLimitMiddleware",
    "blog.middlewares.security.ViewCountSecurityMiddleware",
]

# portfolio.middlewares.remove_trailing_slashes.RemoveTrailingSlashMiddleware,
# - removed because of it interferes with wagtail's loading of pages

ROOT_URLCONF = "portfolio.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "app/templates"),
            os.path.join(BASE_DIR, "blog/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "app.context.context_processors.metadata_context",
                "app.context.context_processors.admin_profile",
                "app.context.context_processors.our_services",
            ],
        },
    },
]

ASGI_APPLICATION = "portfolio.asgi.application"
WSGI_APPLICATION = "portfolio.wsgi.application"


SUPABASE_DB_NAME = os.environ.get("SUPABASE_DB_NAME", default="")
SUPABASE_USER = os.environ.get("SUPABASE_USER", default="")
SUPABASE_DB_PW = os.environ.get("SUPABASE_DB_PW", default="")
SUPABASE_HOST = os.environ.get("SUPABASE_HOST", default="")
SUPABASE_PORT = os.environ.get("SUPABASE_PORT", default="")

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if (ENVIRONMENT == 'production' and not DEBUG):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": SUPABASE_DB_NAME,
            "USER": SUPABASE_USER,
            "PASSWORD": SUPABASE_DB_PW,
            "HOST": SUPABASE_HOST,
            "PORT": SUPABASE_PORT,
            "OPTIONS": {
                "connect_timeout": 30,
                "options": "-c statement_timeout=300000",  # 5 minutes
            },
            "CONN_MAX_AGE": 600,  # 10 minutes connection pooling
        }
    }

    PROJECTS_FOLDER = "portfolio/projects/live"
    POSTS_FOLDER = "portfolio/posts/live"
    PROFILE_FOLDER = "portfolio/profiles/live"

else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

    PROJECTS_FOLDER = "portfolio/projects/dev"
    POSTS_FOLDER = "portfolio/posts/dev"
    PROFILE_FOLDER = "portfolio/profiles/dev"

# sessions
SESSION_CACHE_ALIAS = "default"

if ENVIRONMENT == 'production':
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"

    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://" + REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": REDIS_PASSWORD,
                "SOCKET_CONNECT_TIMEOUT": 30,
                "SOCKET_TIMEOUT": 60,
                "SOCKET_KEEPALIVE": True,
                "SOCKET_KEEPALIVE_OPTIONS": {
                    "TCP_KEEPIDLE": 1,
                    "TCP_KEEPINTVL": 1,
                    "TCP_KEEPCNT": 5,
                },
                "CONNECTION_POOL_KWARGS": {
                    "max_connections": 20,
                    "retry_on_timeout": True,
                    "socket_keepalive": True,
                    "socket_keepalive_options": {
                        "TCP_KEEPIDLE": 1,
                        "TCP_KEEPINTVL": 3,
                        "TCP_KEEPCNT": 5,
                    },
                },
            },
        }
    }
else:
    SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# https://docs.djangoproject.com/en/4.2/topics/auth/passwords/
# declared this way to avoid flake8 errors
_p = "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
_min = "django.contrib.auth.password_validation.MinimumLengthValidator"
_common = "django.contrib.auth.password_validation.CommonPasswordValidator"
_numeric = "django.contrib.auth.password_validation.NumericPasswordValidator"
_complex = "app.views.helpers.password_validator.ComplexPasswordValidator"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": _p,
    },
    {
        "NAME": _min,
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": _common,
    },
    {
        "NAME": _numeric,
    },
    {
        "NAME": _complex,
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Nairobi"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = "/static/"

STATICFILES_DIRS = [
    # React build directory (contains both React and Django static assets)
    os.path.join(BASE_DIR, 'frontend/build'),
]

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

LOGIN_REDIRECT_URL = "home"

LOGIN_URL = "/login"

LOGOUT_REDIRECT_URL = "/"

LOGOUT_URL = "/logout"

APPEND_SLASH = True


# WAGTAIL SETTINGS
WAGTAIL_SITE_NAME = "Ethan Muthoni"

# Custom Image Model for Cloudinary integration
WAGTAILIMAGES_IMAGE_MODEL = 'blog.CloudinaryWagtailImage'

WAGTAIL_FRONTEND_LOGIN_URL = LOGIN_URL

WAGTAILADMIN_BASE_URL = 'https://rohn.live'

WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx',
                          'rtf', 'txt', 'xlsx', 'zip']

WAGTAILADMIN_RICH_TEXT_EDITORS = {
    'default': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': ['h2', 'h3', 'h4', 'h5', 'h6', 'bold', 'italic',
                         'ol', 'ul', 'link', 'hr', 'code', 'image',
                         'document-link', 'blockquote', 'embed']
        }
    },
    'full': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': ['h2', 'h3', 'h4', 'h5', 'h6', 'bold', 'italic',
                         'ol', 'ul', 'link', 'hr', 'code', 'image',
                         'document-link', 'blockquote', 'embed']
        }
    },
    'minimal': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': ['h2', 'h3', 'h4', 'h5', 'h6', 'bold', 'italic',
                         'ol', 'ul', 'link', 'hr', 'code', 'image',
                         'document-link', 'blockquote', 'embed']
        }
    },
}

# Wagtail-specific timeout and session settings
WAGTAILADMIN_TIMEOUT = 300  # 5 minutes timeout for admin operations
WAGTAILADMIN_SESSION_TIMEOUT = 3600  # 1 hour session timeout for admin
WAGTAILADMIN_AUTO_SAVE_INTERVAL = 30  # Auto-save every 30 seconds


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


CRISPY_TEMPLATE_PACK = "bootstrap5"

if (ENVIRONMENT == 'production' and not DEBUG):
    CSRF_COOKIE_SECURE: bool = True
    SESSION_COOKIE_SECURE: bool = True
    SECURE_SSL_REDIRECT: bool = True
    SECURE_BROWSER_XSS_FILTER: bool = True
    SECURE_CONTENT_TYPE_NOSNIFF: bool = True
    SECURE_HSTS_SECONDS: int = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS: bool = True
    SECURE_HSTS_PRELOAD: bool = True
    SECURE_PROXY_SSL_HEADER: tuple = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_REF: str = "no-referrer"
    SECURE_REF_POLICY: str = "strict-origin-when-cross-origin"

CSRF_FAILURE_VIEW = csrf_failure_view

# Maximum upload size for images in bytes
MAX_UPLOAD_SIZE: int = 15 * 1024 * 1024  # 15MB or 15 * 1024 * 1024 bytes

# Allowed image types
# Note: This is a list of MIME types. You can add more types as needed.
ALLOWED_IMAGE_TYPES = ["image/jpeg", "image/png", "image/gif",
                       "image/webp", "image/svg+xml", "image/bmp",
                       "image/tiff", "image/x-icon"]


# Image links for Error Codes 400, 403, 404, 500
ERROR_400: str = get_error_files()[0]

ERROR_403: str = get_error_files()[1]

ERROR_404: str = get_error_files()[2]

ERROR_500: str = get_error_files()[3]


# captcha settings
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'
CAPTCHA_TIMEOUT = 5  # 5 minutes timeout
CAPTCHA_LENGTH = 6  # 6 characters
CAPTCHA_NOISE_FUNCTIONS = (
    'captcha.helpers.noise_dots',
    'captcha.helpers.noise_arcs',
)
CAPTCHA_IMAGE_SIZE = (150, 50)  # Larger image for better readability
CAPTCHA_LETTER_ROTATION = (-10, 10)  # Less rotation for better readability
CAPTCHA_FOREGROUND_COLOR = '#001F3F'  # Dark blue for better contrast
CAPTCHA_BACKGROUND_COLOR = '#FFFFFF'  # White background
CAPTCHA_FONT_SIZE = 32  # Larger font
CAPTCHA_OUTPUT_FORMAT = 'png'
CAPTCHA_IMAGE_BEFORE_FIELD = True
CAPTCHA_REFRESH_CHALLENGE = True

""" Session settings """
# Browser session timeout (when user closes browser)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Inactivity timeout in seconds (8 hours = 28800 seconds)
SESSION_COOKIE_AGE = 28800
CSRF_COOKIE_AGE = 28800

# Update session on every request to prevent timeout during editing
SESSION_SAVE_EVERY_REQUEST = True

# Additional session settings for long editing sessions
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_ENGINE_TIMEOUT = 3600  # 1 hour timeout for session engine operations

PROJECT_TYPES = [
    ('personal', 'Personal'),
    ('professional', 'Professional'),
]

# Software Development Project Categories
CATEGORY_CHOICES = [('Web Development', 'Web Development'),
                    ('Software Development', 'Software Development'),
                    ('Database Management', 'Database Management'),
                    ('DevOps', 'DevOps'),
                    ('Networking', 'Networking'),
                    ('UI/UX Design', 'UI/UX Design'),
                    ('Cyber Security', 'Cyber Security'),
                    ('Cloud Computing', 'Cloud Computing'),
                    ('Machine Learning', 'Machine Learning'),
                    ('Data Science', 'Data Science'),
                    ('Artificial Intelligence', 'Artificial Intelligence'),
                    ('Internet of Things', 'Internet of Things'),
                    ('Game Development', 'Game Development'),
                    ('Other', 'Other')
                    ]

SITE_ID = 1

# ============================
# CORS CONFIGURATION
# ============================

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite default port
    "http://127.0.0.1:5173",
]

if ENVIRONMENT == 'production':
    CORS_ALLOWED_ORIGINS += [
        "https://ethanmuthoni.me",
        "https://www.ethanmuthoni.me",
        "https://portfolio-ot66.onrender.com",
        "https://rohn.live"
    ]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = False if ENVIRONMENT == 'production' else True

# ============================
# RATE LIMITING CONFIGURATION
# ============================

# General rate limit value from environment variable, default == 1000
try:
    RATELIMIT = int(os.environ.get("RATELIMIT", "10000"))
except (ValueError, TypeError):
    RATELIMIT = 1000

LEGITIMATE_BOTS = os.environ.get("LEGITIMATE_BOTS",
                                 default="googlebot,bravebot").split(",")
SUSPICIOUS_BOTS = os.environ.get("SUSPICIOUS_PATTERNS",
                                 default="crawler,spider,scraper").split(",")

# if RATELIMIT is less than 1000, set it to 1000
if RATELIMIT < 1000:
    RATELIMIT = 1000

# Comprehensive Rate Limiting Settings
RATE_LIMITING = {
    # Global rate limiting (requests per hour per IP)
    'GLOBAL': {
        'REQUESTS': RATELIMIT,  # requests per hour
        'WINDOW': 3600,  # 1 hour in seconds
        'CACHE_KEY_PREFIX': 'global_rate_limit',
    },

    # Blog view count specific rate limiting
    'BLOG_VIEW_COUNT': {
        'REQUESTS': 10,  # max 10 view count increments per hour per IP
        'WINDOW': 3600,  # 1 hour in seconds
        'CACHE_KEY_PREFIX': 'blog_view_count_rate_limit',
        'SESSION_COOLDOWN': 600,  # 10 minutes for session-based view tracking
    },

    # Authentication rate limiting (login attempts, etc.)
    'AUTH': {
        'REQUESTS': 10,  # max 10 auth attempts per hour per IP
        'WINDOW': 3600,  # 1 hour in seconds
        'CACHE_KEY_PREFIX': 'auth_rate_limit',
    },

    # API rate limiting (if you have APIs)
    'API': {
        'REQUESTS': RATELIMIT,  # max 100 API calls per hour per IP
        'WINDOW': 3600,  # 1 hour in seconds
        'CACHE_KEY_PREFIX': 'api_rate_limit',
    },

    # Bot detection settings
    'BOT_DETECTION': {
        'LEGITIMATE_BOTS': LEGITIMATE_BOTS,
        'SUSPICIOUS_PATTERNS': SUSPICIOUS_BOTS,
        'MIN_USER_AGENT_LENGTH': 10,
    }
}

# Session settings for view count tracking
VIEW_COUNT_SESSION_TIMEOUT = RATE_LIMITING['BLOG_VIEW_COUNT'][
    'SESSION_COOLDOWN'
]

""" Services Offered Json format """
OUR_SERVICES = [
    {
        "id": 1,
        "title": "Website Development",
        "description": "Custom-built responsive websites tailored to your\
            specific needs, ensuring an engaging and professional online\
                presence.",
        "icon": "bi bi-code-square"
    },
    {
        "id": 2,
        "title": "Website Hosting",
        "description": "Reliable and secure hosting solutions with 99.9%\
            uptime guarantee to ensure your website is always accessible to\
                your audience.",
        "icon": "bi bi-hdd-stack"
    },
    {
        "id": 3,
        "title": "Backend Development",
        "description": "Robust backend systems and RESTful APIs to power your\
            applications with scalable and secure infrastructure.",
        "icon": "bi bi-database"
    },
    {
        "id": 4,
        "title": "QA & Testing",
        "description": "Comprehensive testing to ensure your applications are\
            bug-free, secure, and deliver optimal performance for all users.",
        "icon": "bi bi-bug"
    },
    {
        "id": 5,
        "title": "Maintenance & Support",
        "description": "Ongoing technical support and scheduled maintenance\
            to keep your systems updated, secure, and running smoothly.",
        "icon": "bi bi-cloud"
    },
    {
        "id": 6,
        "title": "Database Design",
        "description": "Strategic database architecture ensuring efficient\
            data storage, quick retrieval, and seamless scalability as your\
                business grows.",
        "icon": "bi bi-tools"
    }
]

# Error handlers for custom error pages
if not DEBUG:
    # Only use custom error handlers in production
    handler400 = 'app.views.error_views.custom_400'
    handler403 = 'app.views.error_views.custom_403'
    handler404 = 'app.views.error_views.custom_404'
    handler500 = 'app.views.error_views.custom_500'
